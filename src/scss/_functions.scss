/* Fonts */
$norm: 'Roboto', sans-serif;
$cond: 'Roboto Condensed', sans-serif;

/* Display */
$screen-sm-min: 768px;
$screen-md-min: 992px;
$screen-lg-min: 1280px;

$screen-xxs: 450px;
$navbar-md: 530px;
$footer-md: 600px; 

/* Sizes */
$ms-base: 1em;
$ms-ratio: 1.618;

/* 
$screen-xs-max: $screen-sm-min - 1;
$screen-sm-max: $screen-md-min - 1;
$screen-md-max: $screen-lg-min - 1;
*/

@mixin ie8-only() {
	.ie8 & { @content };
}

@mixin ios8-only() {
	.ios8 & { @content };
}

@mixin webkit-only() {
	@media screen and (-webkit-min-device-pixel-ratio:0) { @content; }
}

@mixin respond-min-width( $min-width ) {
	@media only screen and (min-width: $min-width) { @content; }
}

@mixin respond-max-width( $max-width ) {
	@media only screen and (max-width: $max-width) { @content; }
}

@mixin respond-screen( $min-width, $max-width ) {
	@media only screen and (min-width: $min-width) and (max-width: $max-width)  { @content; }
}

@mixin respond-to( $media ) {
	@if $media == screen-xs {
		@media only screen and (max-width:$screen-xs-max) { @content; }
	}
	@else if $media == screen-sm {
		@media only screen and (min-width: $screen-sm-min) { @content; }
	}
	@else if $media == screen-md {
		@media only screen and (min-width: $screen-md-min) { @content; }
	}
	@else if $media == screen-lg {
		@media only screen and (min-width: $screen-lg-min) { @content; }
	} 
}




/* Aesthetical */
@mixin gradient( $from, $to, $middle )  {
	background: $from; /* Old browsers */
	background: -moz-linear-gradient(left, $from 0%, $from $middle, $to $middle, $to 100%, $to 100%); /* FF3.6+ */
	background: -webkit-gradient(linear, left top, right top, color-stop(0%,$from), color-stop($middle,$from), color-stop($middle,$to), color-stop(100%,$to), color-stop(100%,$to)); /* Chrome,Safari4+ */
	background: -webkit-linear-gradient(left, $from 0%,$from $middle,$to $middle,$to 100%,$to 100%); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient(left, $from 0%,$from $middle,$to $middle,$to 100%,$to 100%); /* Opera 11.10+ */
	background: -ms-linear-gradient(left, $from 0%,$from $middle,$to $middle,$to 100%,$to 100%); /* IE10+ */
	background: linear-gradient(to right, $from 0%,$from $middle,$to $middle,$to 100%,$to 100%); /* W3C */
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$from', endColorstr='$to',GradientType=1 ); /* IE6-9 */
}

@mixin placeholder-color( $placeholder-color ) {
  ::-webkit-input-placeholder {color: $placeholder-color;}
  :-moz-placeholder           {color: $placeholder-color;}
  ::-moz-placeholder          {color: $placeholder-color;}
  :-ms-input-placeholder      {color: $placeholder-color;}  
}

@mixin box-shadow( $top, $left, $blur, $color ) {
	-webkit-box-shadow: $top $left $blur $color;
	-moz-box-shadow:    $top $left $blur $color;
	box-shadow:         $top $left $blur $color;
}

@mixin text-stroke( $color ) {
	-webkit-text-stroke: 1px rgba( red($color), green($color), blue($color), 0.1);
}

@mixin transition($transition-property, $transition-time, $method) {
    -webkit-transition: $transition-property $transition-time $method;
    -moz-transition: $transition-property $transition-time $method;
    -ms-transition: $transition-property $transition-time $method;
    -o-transition: $transition-property $transition-time $method;
    transition: $transition-property $transition-time $method;
}













/* AMS Mixins  */

@mixin border-radius($radius:5px) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}

@mixin hp-opacity($trans) {
  filter: alpha(opactiy=($trans * 100));
  -moz-opacity: $trans;
  -khtml-opacity: $trans;
  opacity: $trans;
}

@mixin triangle($dir, $size, $color:transparent) {
    border: $size transparent solid;
     @if ($dir == "top" or $dir == "up") {
        border-bottom-color: $color;
    }
    @else if ($dir == "right" or $dir == "after") {
        border-left-color: $color;
    }
    @else if ($dir == "bottom" or $dir == "down") {
        border-top-color: $color;
    }
    @else if ($dir == "left" or $dir == "before") {
        border-right-color: $color;
    }
}

@mixin hp-opacity($trans) {
  filter: alpha(opactiy=($trans * 100));
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$trans * 100})";
  -moz-opacity: $trans;
  -khtml-opacity: $trans;
  opacity: $trans;
}

@mixin prefix($property, $value, $prefixes: webkit moz ms o spec) {
    @each $p in $prefixes {
        @if $p == spec {
            #{$property}: $value;
        }
        @else {
            -#{$p}-#{$property}: $value;
        }
    }
}


$drop-shadow-colour:rgba( red( $colour-black ), green( $colour-black ), blue( $colour-black ), 0.3 );

@mixin default-panel-drop-shadow() {
	-webkit-box-shadow: 0px 0px 4px 0px $drop-shadow-colour;
	-moz-box-shadow:    0px 0px 4px 0px $drop-shadow-colour;
	box-shadow:         0px 0px 4px 0px $drop-shadow-colour;
	/**
	.default-ie-drop-shadow-substitute();
	*/
}
$ie8-border-colour:$colour-light-grey;

@mixin default-panel-drop-shadow-ie8() {
	border:1px solid $ie8-border-colour;
}

@mixin default-heading-text-shadow( $text-shadow-color:$palette-colour-general-dark ) {
	text-shadow: 1px -1px 1px rgba( red( $text-shadow-color), green( $text-shadow-color ), blue( $text-shadow-color ), 1.0 );
}








/* Material Shadow */
/// Gives a card depth effect.
/// @param {Number} $depth - depth level (between 1 and 5)
/// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
/// @requires {function} top-shadow
/// @requires {function} bottom-shadow
@mixin card($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);  
  }
}

/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba(black, nth(.12 .16 .19 .25 .30, $depth));

  @return 0 $primary-offset $blur $color;
}

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba(black, nth(.24 .23 .23 .22 .22, $depth));

  @return 0 $primary-offset $blur $color;
}